// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // App relations:
  daos      UserDaoMemberships[]
  proposals Proposal[]           @relation("proposing")
  votes     Vote[]               @relation("voting")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// App models
model Dao {
  id   String  @id @default(cuid())
  ipfs String? @db.VarChar(64)

  name        String
  description String? @db.Text

  // App fields:
  // profile? TODO
  published Boolean @default(false)

  // App relations:
  proposals Proposal[]
  votes     Vote[]
  members   UserDaoMemberships[]
}

model UserDaoMemberships {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  dao   Dao    @relation(fields: [daoId], references: [id])
  daoId String

  @@id([userId, daoId])
}

model Proposal {
  id   String  @id @default(cuid())
  ipfs String? @db.VarChar(64)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  startsAt DateTime?
  endsAt   DateTime?

  title String
  body  String?

  // boolean choices etc - TODO - model?
  choices Json?

  // start, end block nums
  start Int?
  end   Int?

  quorum Decimal? @db.Decimal(64, 30)

  // snapshot

  // App fields:
  published Boolean @default(false)

  // Comments/Discussions?
  // TODO

  // App relations:
  dao   Dao    @relation(fields: [daoId], references: [id])
  daoId String

  proposedBy   User?   @relation("proposing", fields: [proposedById], references: [id])
  proposedById String?

  votes Vote[]
}

model Vote {
  id   String  @id @default(cuid())
  ipfs String? @db.VarChar(64)

  createdAt DateTime @default(now())

  choice Json // could be boolean, choice etc - see Proposal.choices
  reason String? @db.Text

  // App relations:
  dao   Dao    @relation(fields: [daoId], references: [id])
  daoId String

  proposal   Proposal @relation(fields: [proposalId], references: [id])
  proposalId String

  voter   User?   @relation("voting", fields: [voterId], references: [id])
  voterId String?
}
